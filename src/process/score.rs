////////////////////////////////////////////////////////////////////////////////////////////////////

// standard libraries
use anyhow::Result as anyResult;
use clap::Parser;
use std::collections::HashMap;
use config::{
  Config,
  File,
  FileFormat,
};
use std::path::PathBuf;

////////////////////////////////////////////////////////////////////////////////////////////////////

// crate utilities

////////////////////////////////////////////////////////////////////////////////////////////////////

pub fn score(motifs_overlapping_tracks_file: &str, normal_expression_per_tissue_origin_per_TF: &str, matching_tissue_to_cell: &str, motifTFName_TFNames_matches_dict: &str, cells_assays_dict: &str, cell_tfs: &str, tf_cells: &str, assay_cells_datatypes: &str, index_track_names: i32, index_motif_name: i32) -> anyResult<()> {

  // declare file

  // check whether output file exists

  // read input file

  // motif score function
  motif_score()?;

  // process scored motif function
  process_scored_motif_per_cell_per_assay()?;

  Ok(())
}

////////////////////////////////////////////////////////////////////////////////////////////////////

fn motif_score() -> anyResult<()> {

  Ok(())
}

////////////////////////////////////////////////////////////////////////////////////////////////////

fn process_scored_motif_per_cell_per_assay() -> anyResult<()> {

  Ok(())
}

////////////////////////////////////////////////////////////////////////////////////////////////////
