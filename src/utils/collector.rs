////////////////////////////////////////////////////////////////////////////////////////////////////

// standard libraries
use anyhow::{Context, Result as anyResult};
use clap::ArgMatches;
use std::str::FromStr;

////////////////////////////////////////////////////////////////////////////////////////////////////

// crate utilities
use crate::structures::{log_flag::LogFlag, params_cli::ParamsCLI};

////////////////////////////////////////////////////////////////////////////////////////////////////

// error handler
use crate::utils::error::FunMotifsError;

////////////////////////////////////////////////////////////////////////////////////////////////////

pub fn collect_str(matches: ArgMatches) -> anyResult<ParamsCLI> {
  Ok(ParamsCLI {
    // input
    input: matches.value_of("input").unwrap().to_string(),

    // output
    output: matches.value_of("output").unwrap().to_string(),

    // logging
    log: LogFlag::from_str(
      matches
        .value_of("log")
        .context(FunMotifsError::ParseFlag { f: "".to_string() })?,
    )
    .unwrap(),
  })
}

////////////////////////////////////////////////////////////////////////////////////////////////////
