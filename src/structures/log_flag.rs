////////////////////////////////////////////////////////////////////////////////////////////////////

// standard libraries
use core::str::FromStr;

////////////////////////////////////////////////////////////////////////////////////////////////////

/// Log flag enum.
#[derive(Debug, Eq, PartialEq)]
pub enum LogFlag {
  Info,
  Debug,
  Warn,
  Error,
}

////////////////////////////////////////////////////////////////////////////////////////////////////

// collect str into LogFlag enum
impl FromStr for LogFlag {
  type Err = ();

  fn from_str(input: &str) -> Result<LogFlag, Self::Err> {
    match input {
      "i" | "info" => Ok(LogFlag::Info),
      "d" | "debug" => Ok(LogFlag::Debug),
      "w" | "warn" => Ok(LogFlag::Warn),
      "e" | "error" => Ok(LogFlag::Error),
      _ => Err(()),
    }
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////
