////////////////////////////////////////////////////////////////////////////////////////////////////

// fun_motifs_plugin wrapper
use fun_motifs_plugin::*;

////////////////////////////////////////////////////////////////////////////////////////////////////

// standard libraries
use anyhow::Result as anyResult;
use std::collections::HashMap;
use config::{
  Config,
  File,
  FileFormat,
};
use clap::Parser;

////////////////////////////////////////////////////////////////////////////////////////////////////

// crate utilities
use crate::utils::help::Cli;

////////////////////////////////////////////////////////////////////////////////////////////////////

// error handler
use crate::utils::error::ConfigError;

////////////////////////////////////////////////////////////////////////////////////////////////////

fn main() -> anyResult<()> {

  // collect command line arguments
  let params = Cli::parse();

  println!("{:?}", params);

  let builder = Config::builder()
    .set_default("default", "1")?
    .add_source(File::new(&params.config, FileFormat::Toml))
    .set_override("override", "1")?;

match builder.build() {
  Ok(config) => {
      // use your config
      let config_hm = config.try_deserialize::<HashMap<String, String>>().unwrap();
      println!("{:?}", config_hm);
  },
  Err(_e) => {
      // something went wrong
  }
}

  // verify & create paths

  // overlay_resources_score_motifs

  // score_motifs_per_cell

  //

  Ok(())
}

////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////
// reset_cells_assays_matrix
////////////////////////////////////////////////////////////////////////////////////////////////////
// NO DOCUMENTATION

////////////////////////////////////////////////////////////////////////////////////////////////////
// get_motif_score
////////////////////////////////////////////////////////////////////////////////////////////////////
// Calculates a score for a given motif per cell line.

////////////////////////////////////////////////////////////////////////////////////////////////////
// process_scored_motif_per_cell_per_assay
////////////////////////////////////////////////////////////////////////////////////////////////////
// Adds values from the dict to a list and imputate values for NaNs from the other tissues when possible.

////////////////////////////////////////////////////////////////////////////////////////////////////
// score_motifs_per_cell
////////////////////////////////////////////////////////////////////////////////////////////////////
// Input: a list of motifs overlapping cell tracks in bed7 format
//        normal gene expression dictionary: keys are cell#TF and values are expression levels (float)
// Return: list of scored motifs files

////////////////////////////////////////////////////////////////////////////////////////////////////
// overlay_resources_score_motifs
////////////////////////////////////////////////////////////////////////////////////////////////////
// intersect motifs with chromatin tracks, sort and group the tracks per motif
// Input: motif instances file (motif pos, name_id, scorePval, strand)
//        chromatin data collection file in bed4 format; track pos, track cell#assaytype#value or cell#TFname in case of chip-seq
// Return a file in bed7 format (motif info (6cols), overlapping_tracks.

////////////////////////////////////////////////////////////////////////////////////////////////////
// run_overlay_resources_score_motifs
////////////////////////////////////////////////////////////////////////////////////////////////////
// pairs matching chromosomes in motif_sites_input_dir and all_chromatin_makrs_all_cells_input_dir and calls
// overlay_resources_score_motifs
// Input: moitf instances input dir (one file per chr) chromatin data collection dir
// (one file per chr, bed4 format; track pos, track cell#assaytype#value or cell#TFname in case of chip-seq)
// Return: a list of motif_overlapping_track files Precondition: files in motif_sites_input_dir and
// chromatin_tracks_input_dir should have the same names
// Recommended: name files in both dirs as chrNumber, chrX or chrY (where number is between 1-22)

////////////////////////////////////////////////////////////////////////////////////////////////////
